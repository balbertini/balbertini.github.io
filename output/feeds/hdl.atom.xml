<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>B.Albertini's site - hdl</title><link href="https://balbertini.github.io/" rel="alternate"></link><link href="https://balbertini.github.io/feeds/hdl.atom.xml" rel="self"></link><id>https://balbertini.github.io/</id><updated>2020-09-21T22:06:21-03:00</updated><subtitle>Professor</subtitle><entry><title>Como usar o EDA Playground</title><link href="https://balbertini.github.io/vhdl_edaplayground-pt_BR.html" rel="alternate"></link><published>2020-06-15T14:22:04-03:00</published><updated>2020-06-15T14:22:04-03:00</updated><author><name>Bruno Albertini</name></author><id>tag:balbertini.github.io,2020-06-15:/vhdl_edaplayground-pt_BR.html</id><summary type="html">&lt;p&gt;Como usar o EDA Playground.&lt;/p&gt;</summary><content type="html">&lt;p&gt;O &lt;strong&gt;EDA Playground&lt;/strong&gt; é uma ferramenta muito útil para estudantes pois não precisa de nenhuma instalação, sendo totalmente online. O ambiente possui suporte ao GHDL, portanto você conseguirá testar os seus projetos facilmente, como o juiz usado nas matérias de hardware do PCS testa.&lt;/p&gt;
&lt;h1&gt;EDA Playground&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.edaplayground.com/"&gt;&lt;i style="font-size: 1em;" class="fas fa-file-alt"&gt;&lt;/i&gt; Página&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HDLs:&lt;/strong&gt; VHDL, Verilog, SystemVerilog, C++/SystemC, Outras | &lt;strong&gt;SOs:&lt;/strong&gt; &lt;i style="font-size: 1em;" class="fas fa-globe"&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;O EDA Playground é um simulador online que suporta várias linguagens de descrição de hardware. É mantido pela &lt;a href="https://www.doulos.com/"&gt;Doulos&lt;/a&gt;, uma empresa privada que fornece treinamentos (inclusive em HDLs). Sua maior vantagem está em funcionar com qualquer navegador de internet moderno, sem necessidade de nenhuma instalação adicional. Há limitações para utilizar o ambiente sem uma conta, mas é possível se cadastrar com o email @usp e conseguir uma conta com suporte a salvar o trabalho e acesso a algumas ferramentas indisponíveis na versão aberta (o processo de cadastro demora, não deixe para se cadastrar na última hora). Para facilitar, faça login com sua senha única USP usando o método de login "com conta Google".&lt;/p&gt;
&lt;p&gt;Para usá-lo, basta acessar o link acima (Página) e começar o seu projeto. A ferramenta só aceita projetos no formato padrão de DUT (&lt;em&gt;Design Under Test&lt;/em&gt;), onde o seu &lt;em&gt;testbench&lt;/em&gt; é responsável por instanciar e gerar os estímulos para sua entidade &lt;em&gt;toplevel&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Caso tenha dificuldades, acesse a documentação (em inglês) &lt;a href="https://eda-playground.readthedocs.io/en/latest/"&gt;aqui&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;No restante deste tutorial, assumimos que já logou com sua conta @usp e vamos nos concentrar em simular uma descrição de uma ULA (Unidade Lógica e Aritmética) simples em VHDL.&lt;/p&gt;
&lt;h2&gt;Configuração&lt;/h2&gt;
&lt;p&gt;&lt;img src='https://balbertini.github.io/images/vhdl/edaplayground/configuration.png' width="20%" align="left" style="padding-right:5%" /&gt;
Quando acessar o ambiente, verá um painel a esquerda, como o mostrado na figura. Neste painel você pode escolher e configurar a ferramenta que utilizará para simulação.&lt;/p&gt;
&lt;p&gt;A primeira coisa que deve fazer é escolher VHDL na caixa &lt;strong&gt;Testbench+Design&lt;/strong&gt;. Isto vai abrir um leque de opções para escolher, todas relativas a VHDL.&lt;/p&gt;
&lt;p&gt;Em bibliotecas, marque a opção &lt;strong&gt;None&lt;/strong&gt; pois não usaremos nenhuma biblioteca extra. Mesmo se usar bibliotecas não padronizadas na sua descrição, esta opção deve ficar como &lt;strong&gt;None&lt;/strong&gt; pois diz respeito a bibliotecas externas, usadas para verificação e teste de cobertura avançados. Todas as bibliotecas de VHDL (incluindo a &lt;code&gt;1164&lt;/code&gt; e a &lt;code&gt;textio&lt;/code&gt;) já estão disponíveis no EDA Playground sem importar bibliotecas extras.&lt;/p&gt;
&lt;p&gt;Já no &lt;strong&gt;Top entity&lt;/strong&gt; você deve colocar a entidade principal do seu &lt;em&gt;toplevel&lt;/em&gt;, já que esta é a entidade que o simulador deve procurar na hora de simular seu circuito. No nosso exemplo, a entidade chama-se &lt;code&gt;alu_andor_tb&lt;/code&gt;, portanto preencha com este nome.&lt;/p&gt;
&lt;p&gt;A caixa de de &lt;strong&gt;Enable VUnit&lt;/strong&gt; deve estar desmarcada pois não usamos testes unitários no exemplo (também não cobrimos este assunto para VHDL nas disciplinas de graduação).&lt;/p&gt;
&lt;p&gt;Em &lt;strong&gt;Tools &amp;amp; Simulators&lt;/strong&gt; escolha o GHDL. Para ficar mais próximo da simulação usada na graduação, deixe as opções em &lt;strong&gt;Compile &amp;amp; Run options&lt;/strong&gt; todas vazias. Se desejar usar os &lt;em&gt;flags&lt;/em&gt; para controlar sua simulação, leia o &lt;a href="https://ghdl.readthedocs.io/en/latest/using/InvokingGHDL.html"&gt;manual&lt;/a&gt; do GHDL antes.&lt;/p&gt;
&lt;p&gt;As duas caixas no final do painel de configuração significam: &lt;strong&gt;Open EPWave after run&lt;/strong&gt; mostra a forma de onda obtida pela simulação, similar ao que o GTKWave mostra (equivale a executar a simulação com a opção &lt;code&gt;--vcd&lt;/code&gt; habilitada); e &lt;strong&gt;Download files after run&lt;/strong&gt; fará com que os seus arquivos todos sejam baixados para sua máquina automaticamente ao final da simulação, no formato ZIP (você pode baixar manualmente depois também).&lt;/p&gt;
&lt;h2&gt;Arquivos&lt;/h2&gt;
&lt;p&gt;O EDA Playground tem duas áreas distintas: uma área para o &lt;em&gt;testbench&lt;/em&gt; e outra para o arquivo da sua descrição. Para continuar, baixe os arquivos &lt;a href="https://raw.githubusercontent.com/balbertini/hwProjects/master/vhdl_modules/alu/alu_andor/alu_andor_tb.vhd"&gt;alu_andor_tb.vhd&lt;/a&gt; e &lt;a href="https://raw.githubusercontent.com/balbertini/hwProjects/master/vhdl_modules/alu/alu_andor/alu_andor.vhd"&gt;alu_andor.vhd&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Área dos arquivos" src="https://balbertini.github.io/images/vhdl/edaplayground/files.png"&gt;&lt;/p&gt;
&lt;p&gt;Na esquerda está a área do &lt;em&gt;testbench&lt;/em&gt;. Cole o conteúdo do arquivo &lt;code&gt;alu_andor_tb.vhd&lt;/code&gt; nesta área. Na direita está a área da sua descrição, cole o conteúdo do arquivo &lt;code&gt;alu_andor.vhd&lt;/code&gt; nesta área. Você deve ter algo parecido com a figura acima.&lt;/p&gt;
&lt;p&gt;Em ambas as áreas, é possível adicionar mais arquivos caso necessite. Se você usa algum componente que está em um outro arquivo VHD, por exemplo, pode incluí-lo usando o botão &lt;i class="fa fa-plus-square"&gt;&lt;/i&gt; e o arquivo estará disponível no mesmo ambiente onde o simulador será executado. Não se esqueça de instanciar apropriadamente seus componentes na sua descrição. No nosso exemplo, usamos apenas um arquivo para o &lt;em&gt;testbench&lt;/em&gt; e outro para a descrição, então não precisamos adicionar mais nada.&lt;/p&gt;
&lt;h2&gt;Simulando&lt;/h2&gt;
&lt;p&gt;&lt;img src='https://balbertini.github.io/images/vhdl/edaplayground/runbutton.png' width="20%" align="left" style="padding-right:5%; padding-bottom:1%;" /&gt;
Na área superior do EDA Playground há três botões, sendo que o primeiro é o &lt;strong&gt;&lt;i class="fa fa-play-circle"&gt;&lt;/i&gt;Run&lt;/strong&gt;. Ao clicar neste botão, o EDA Playground irá invocar o simulador que escolhemos na configuração, neste caso o GHDL.&lt;/p&gt;
&lt;p&gt;A execução exata é: &lt;code&gt;ghdl -i &amp;lt;arquivos.vhd&amp;gt;&lt;/code&gt; (&lt;code&gt;i&lt;/code&gt; de &lt;em&gt;import&lt;/em&gt; em inglês) que importa todos os arquivos VHD do seu projeto para o ambiente de simulação, depois &lt;code&gt;ghdl -m  &amp;lt;toplevel&amp;gt;&lt;/code&gt; (&lt;code&gt;m&lt;/code&gt; de &lt;em&gt;make&lt;/em&gt; em inglês) que analisará todos os arquivos importados considerando que &lt;code&gt;&amp;lt;toplevel&amp;gt;&lt;/code&gt; é a entidade principal a ser simulada, e depois &lt;code&gt;ghdl -r  &amp;lt;toplevel&amp;gt;&lt;/code&gt; (&lt;code&gt;r&lt;/code&gt; de &lt;em&gt;run&lt;/em&gt; em inglês) que efetivamente executará a simulação.&lt;/p&gt;
&lt;p&gt;Clique neste botão agora e observe a saída do &lt;em&gt;Log&lt;/em&gt;, na área logo abaixo dos seus arquivos.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Área de log" src="https://balbertini.github.io/images/vhdl/edaplayground/log.png"&gt;&lt;/p&gt;
&lt;p&gt;Na área de log, podemos ver a execução da simulação. Qualquer mensagem eventualmente impressa pelo seu &lt;em&gt;testbench&lt;/em&gt; aparecerá nesta área. Veja que imprimimos BOT e EOT sem nenhuma mensagem intermediária, o que significa que a descrição passou em todos os testes.&lt;/p&gt;
&lt;h2&gt;Visualizando formas de onda&lt;/h2&gt;
&lt;p&gt;Para simulações de descrições totalmente combinatórias, um &lt;em&gt;testbench&lt;/em&gt; bem feito é suficiente para procurar e resolver possíveis problemas, porém para circuitos sequenciais isto não é totalmente verdade devido a correlação temporal inerente deste tipo de circuito. Para este tipo de circuito, é muito útil ter acesso à forma de onda do circuito simulado.&lt;/p&gt;
&lt;p&gt;Marque a opção &lt;strong&gt;Open EPWave after run&lt;/strong&gt; e execute a simulação novamente. Ao final, você será apresentado com a tela do visualizador de forma de onda, chamado de &lt;strong&gt;EPWave&lt;/strong&gt; no EDA Playground. A primeira vez que abri-lo, as forma de onda estará vazia. Vamos adicionar sinais: clique no botão (esquerda superior do EPWave) &lt;strong&gt;Get Signals&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Área de log" src="https://balbertini.github.io/images/vhdl/edaplayground/getsignals.png"&gt;&lt;/p&gt;
&lt;p&gt;No menu que abrirá, como na figura acima, escolha os sinais que deseja visualizar na forma de onda. No nosso exemplo, clique em &lt;code&gt;dut&lt;/code&gt; e depois no botão &lt;strong&gt;Append All&lt;/strong&gt; e em seguida &lt;strong&gt;Close&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Pronto! Você poderá ver a forma de onda do circuito como na figura abaixo.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Área de log" src="https://balbertini.github.io/images/vhdl/edaplayground/wave.png"&gt;&lt;/p&gt;
&lt;p&gt;Tente identificar as entradas e saídas do circuito na forma de onda. Note que a ULA é combinatória, então quem dita o tempo é o &lt;em&gt;testbench&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Diferenças do juiz&lt;/h2&gt;
&lt;p&gt;Há duas diferenças primárias na execução do EDA Playground e do juiz. A primeira é a versão do GHDL. O juiz pode usar uma versão diferente do GHDL, o que pode fazer com que a simulação seja ligeiramente diferente do EDA Playground. A segunda é a maneira que o juiz executa a simulação. No EDA Playground, usa-se o fluxo &lt;code&gt;import&lt;/code&gt;, &lt;code&gt;make&lt;/code&gt; e &lt;code&gt;run&lt;/code&gt; do GHDL, enquanto o juiz analisa arquivo por arquivo (opção &lt;code&gt;-a&lt;/code&gt; do GHDL) e só depois de todos analisados é que elabora (opção &lt;code&gt;-e&lt;/code&gt; do GHDL) e executa (opção &lt;code&gt;-r&lt;/code&gt; do GHDL) a simulação. A diferença no fluxo é somente para evitar que o juiz processe arquivos que estão sintaticamente incorretos, preservando a carga da máquina que executa o juiz.&lt;/p&gt;
&lt;p&gt;Nenhuma das diferenças traz vantagens ou desvantagens significativas, se a sua descrição passou em um &lt;em&gt;testbench&lt;/em&gt; bem feito no EDA Playground, irá passar no juiz também. O segredo em "passar" é construir um &lt;em&gt;testbench&lt;/em&gt; bem feito, assim você garante que passará no &lt;em&gt;testbench&lt;/em&gt; feito pelos professores.&lt;/p&gt;</content><category term="hdl"></category><category term="vhdl"></category><category term="verilog"></category><category term="simuladores"></category></entry><entry><title>Simuladores e sintetizadores de HDL</title><link href="https://balbertini.github.io/vhdl_simulators-pt_BR.html" rel="alternate"></link><published>2018-09-14T10:00:54-03:00</published><updated>2020-09-21T22:06:21-03:00</updated><author><name>Bruno Albertini</name></author><id>tag:balbertini.github.io,2018-09-14:/vhdl_simulators-pt_BR.html</id><summary type="html">&lt;p&gt;Lista de programas para HDL.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Há diversos programas que suportam descrições em HDL. Para começar no seu mundo de projetista de hardware usando VHDL ou Verilog, escolha um programa nesta lista e prepare seu ambiente. Quase todos são um &lt;em&gt;Integrated Design Environment&lt;/em&gt; (IDE), ou seja, possuem um ambiente com suporte a descrição incluindo &lt;em&gt;syntax highlight&lt;/em&gt;, acesso rápido a simulação, síntese e algum sistema de gerenciamento de projetos.&lt;/p&gt;
&lt;h3&gt;GHDL&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/ghdl/ghdl/releases"&gt;&lt;i style="font-size: 1em;" class="fas fa-download"&gt;&lt;/i&gt; Download&lt;/a&gt; |
&lt;a href="http://ghdl.free.fr/"&gt;&lt;i style="font-size: 1em;" class="fas fa-file-alt"&gt;&lt;/i&gt; Página&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HDLs:&lt;/strong&gt; VHDL | &lt;strong&gt;SOs:&lt;/strong&gt; &lt;i style="font-size: 1em;" class="fab fa-windows"&gt;&lt;/i&gt; &lt;i style="font-size: 1em;" class="fab fa-linux"&gt;&lt;/i&gt; &lt;i style="font-size: 1em;" class="fab fa-apple"&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;O GHDL é um simulador de código aberto que suporta somente a linguagem VHDL, mantido pelo desenvolvedor Tristan Gingold. Permite que você compile e simule sua descrição na sua máquina usando um compilador nativo, o que é rápido em comparação aos outros simuladores desta página. Contudo, o GHDL não faz síntese nem simulação temporizada (exceto se você descrever seu circuito usando temporização explícita no VHDL).&lt;/p&gt;
&lt;p&gt;Este é o simulador usado para corrigir os exercícios de Sistemas Digitais. Por esse motivo, os professores mantém uma máquina virtual com GHDL instalado, atualizado e funcionando, e esta máquina está disponível para os alunos. Veja &lt;a href="https://balbertini.github.io/vhdl_vmghdl-pt_BR.html"&gt;este artigo&lt;/a&gt; se deseja trabalhar com esta máquina virtual.&lt;/p&gt;
&lt;p&gt;Alternativamente, se você prefere &lt;em&gt;containers&lt;/em&gt; tipo &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;, há uma receita para o GHDL &lt;a href="https://github.com/ghdl/docker"&gt;aqui&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Contribuição do aluno Fillipe Lima (SD1 2020S2): o aluno encontrou &lt;a href="https://www.youtube.com/watch?v=H2GyAIYwZbw"&gt;um vídeo no YouTube&lt;/a&gt; que mostra como instalar e usar o GHDL e o GTKWave no Windows.&lt;/p&gt;
&lt;p&gt;Contribuição do Prof. Edson Midorikawa: &lt;a href="https://balbertini.github.io/vhdl_windowsghdl-pt_BR.html"&gt;um artigo&lt;/a&gt; com um &lt;em&gt;quickstart&lt;/em&gt; do GHDL no Windows 10.&lt;/p&gt;
&lt;h3&gt;EDA Playground&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.edaplayground.com/"&gt;&lt;i style="font-size: 1em;" class="fas fa-file-alt"&gt;&lt;/i&gt; Página&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HDLs:&lt;/strong&gt; VHDL, Verilog, SystemVerilog, C++/SystemC, Outras | &lt;strong&gt;SOs:&lt;/strong&gt; &lt;i style="font-size: 1em;" class="fas fa-globe"&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;O EDA Playground é um simulador online que suporta várias linguagens de descrição de hardware. É mantido pela &lt;a href="https://www.doulos.com/"&gt;Doulos&lt;/a&gt;, uma empresa privada que fornece treinamentos (inclusive em HDLs). Sua maior vantagem está em funcionar com qualquer navegador de internet moderno, sem necessidade de nenhuma instalação adicional. Há limitações para utilizar o ambiente sem uma conta, mas é possível se cadastrar com o email @usp e conseguir uma conta com suporte a salvar o trabalho e acesso a algumas ferramentas indisponíveis na versão aberta (o processo de cadastro demora, não deixe para se cadastrar na última hora).&lt;/p&gt;
&lt;p&gt;Para usá-lo, basta acessar o link acima (Página) e começar o seu projeto. A ferramenta só aceita projetos no formato padrão de DUT (&lt;em&gt;Design Under Test&lt;/em&gt;), onde o seu &lt;em&gt;testbench&lt;/em&gt; é responsável por instanciar e gerar os estímulos para sua entidade &lt;em&gt;toplevel&lt;/em&gt;. Lembre-se de escolher a linguagem no menu a esquerda (&lt;em&gt;Testbench + Design&lt;/em&gt;), assim como o simulador (&lt;em&gt;Tools &amp;amp; Simulators&lt;/em&gt;). Dica: Se você marcar a opção &lt;em&gt;Open EPWave after run&lt;/em&gt;, a forma de onda da simulação será mostrada assim que a mesma terminar.&lt;/p&gt;
&lt;p&gt;Há um tutorial básico do EDA Playground &lt;a href="https://balbertini.github.io/vhdl_edaplayground-pt_BR.html"&gt;aqui&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Active-HDL&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.aldec.com/students/student.php?id=9"&gt;&lt;i style="font-size: 1em;" class="fas fa-download"&gt;&lt;/i&gt; Download&lt;/a&gt; |
&lt;a href="https://www.aldec.com/en/products/fpga_simulation/active_hdl_student"&gt;&lt;i style="font-size: 1em;" class="fas fa-file-alt"&gt;&lt;/i&gt; Página&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HDLs:&lt;/strong&gt; VHDL, Verilog | &lt;strong&gt;SOs:&lt;/strong&gt; &lt;i style="font-size: 1em;" class="fab fa-windows"&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Este programa é um IDE completo para VHDL e Verilog, mas suporta somente simulação. Para síntese, você deve ter instalado um programa de específico na sua máquina (e.g. Quartus, Vivado, ISE, etc), e a IDE se encarrega de invocá-lo corretamente.&lt;/p&gt;
&lt;p&gt;Possui a vantagem de ser mantido por uma empresa terceira (&lt;a href="https://www.aldec.com"&gt;Aldec&lt;/a&gt;), independente do fabricante do hardware alvo do seu projeto. O link para download é da versão de estudante e necessita cadastro (use seu email \@usp).&lt;/p&gt;
&lt;h3&gt;Quartus&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://fpgasoftware.intel.com/?edition=lite"&gt;&lt;i style="font-size: 1em;" class="fas fa-download"&gt;&lt;/i&gt; Download&lt;/a&gt; |
&lt;a href="https://www.intel.com/content/www/us/en/software/programmable/quartus-prime/download.html"&gt;&lt;i style="font-size: 1em;" class="fas fa-file-alt"&gt;&lt;/i&gt; Página&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HDLs:&lt;/strong&gt; VHDL, Verilog | &lt;strong&gt;SOs:&lt;/strong&gt; &lt;i style="font-size: 1em;" class="fab fa-windows"&gt;&lt;/i&gt; &lt;i style="font-size: 1em;" class="fab fa-linux"&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;O Quartus é um IDE fornecido pela Altera, uma subsidiária da &lt;a href="https://www.intel.com"&gt;Intel&lt;/a&gt;. Permite simulação através do ModelSim (fornecido com o pacote), incluindo simulação temporizada para os dispositivos deste fabricante. Quando fizer download, tenha certeza que escolheu o pacote completo incluindo o ModelSim. O link para download é da versão Lite, que é gratuita e suporta sem licença os dispositivos do programa universitário. Caso esteja trabalhando em algum projeto que utilize um dispositivo não suportado na versão Lite, é possível obter uma licença através do programa universitário (consulte seu orientador(a)).&lt;/p&gt;
&lt;h3&gt;Vivado/ISE&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.xilinx.com/support/download.html"&gt;&lt;i style="font-size: 1em;" class="fas fa-download"&gt;&lt;/i&gt; Download&lt;/a&gt; |
&lt;a href="https://www.xilinx.com/products/design-tools/vivado.html"&gt;&lt;i style="font-size: 1em;" class="fas fa-file-alt"&gt;&lt;/i&gt; Página&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HDLs:&lt;/strong&gt; VHDL, Verilog | &lt;strong&gt;SOs:&lt;/strong&gt; &lt;i style="font-size: 1em;" class="fab fa-windows"&gt;&lt;/i&gt; &lt;i style="font-size: 1em;" class="fab fa-linux"&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;O Vivado é um IDE fornecido pela &lt;a href="https://www.xilinx.com/"&gt;Xilinx&lt;/a&gt;. Permite simulação através do ModelSim (fornecido no pacote), incluindo simulação temporizada para os dispositivos fabricados pela Xilinx. O link para download é genérico, consulte seu professor(a) qual versão irá utilizar (recomendo a Lab Edition pois não precisa de licença alguma). A versão HLx possui ainda suporte a síntese de alto nível.&lt;/p&gt;
&lt;p&gt;O ISE é uma versão antiga do IDE da Xilinx disponível somente para Windows. Faça &lt;a href="https://www.xilinx.com/support/download/index.html/content/xilinx/en/downloadNav/design-tools.html"&gt;download&lt;/a&gt; dessa versão somente se for trabalhar com placas antigas (i.e. Spartan-6), caso contrário opte pelo Vivado.&lt;/p&gt;
&lt;h1&gt;Programas úteis&lt;/h1&gt;
&lt;h3&gt;GTKWave&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://sourceforge.net/projects/gtkwave/files/"&gt;&lt;i style="font-size: 1em;" class="fas fa-download"&gt;&lt;/i&gt; Download&lt;/a&gt; |
&lt;a href="http://gtkwave.sourceforge.net/"&gt;&lt;i style="font-size: 1em;" class="fas fa-file-alt"&gt;&lt;/i&gt; Página&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SOs:&lt;/strong&gt; &lt;i style="font-size: 1em;" class="fab fa-windows"&gt;&lt;/i&gt; &lt;i style="font-size: 1em;" class="fab fa-linux"&gt;&lt;/i&gt; &lt;i style="font-size: 1em;" class="fab fa-apple"&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;O GTKWave é um visualizador de formas de onda de código aberto baseado no &lt;a href="http://www.gtk.org/"&gt;GTK+&lt;/a&gt;. Quando simular a descrição do seu circuito, o seu simulador deve gerar um arquivo &lt;a href="https://en.wikipedia.org/wiki/Value_change_dump"&gt;VCD&lt;/a&gt;, que deve ser aberto em um visualizador de ondas como o GTKWave. Este programa é especialmente útil se você não estiver usando um IDE (e.g. GHDL).&lt;/p&gt;
&lt;h3&gt;Atom&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/atom/atom/releases/tag/v1.30.0"&gt;&lt;i style="font-size: 1em;" class="fas fa-download"&gt;&lt;/i&gt; Download&lt;/a&gt; |
&lt;a href="https://atom.io/"&gt;&lt;i style="font-size: 1em;" class="fas fa-file-alt"&gt;&lt;/i&gt; Página&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SOs:&lt;/strong&gt; &lt;i style="font-size: 1em;" class="fab fa-windows"&gt;&lt;/i&gt; &lt;i style="font-size: 1em;" class="fab fa-linux"&gt;&lt;/i&gt; &lt;i style="font-size: 1em;" class="fab fa-apple"&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;O Atom é um editor de textos com suporte a várias linguagens. Eu o utilizo para a maioria dos meus projetos envolvendo HDLs. Para habilitar o suporte a VHDL, instale o pacote &lt;code&gt;language-vhdl&lt;/code&gt; depois de instalar o Atom.&lt;/p&gt;
&lt;h3&gt;LogiSim&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/reds-heig/logisim-evolution/releases"&gt;&lt;i style="font-size: 1em;" class="fas fa-download"&gt;&lt;/i&gt; Download&lt;/a&gt; |
&lt;a href="https://github.com/reds-heig/logisim-evolution"&gt;&lt;i style="font-size: 1em;" class="fas fa-file-alt"&gt;&lt;/i&gt; Página&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SOs:&lt;/strong&gt; &lt;i style="font-size: 1em;" class="fab fa-windows"&gt;&lt;/i&gt; &lt;i style="font-size: 1em;" class="fab fa-linux"&gt;&lt;/i&gt; &lt;i style="font-size: 1em;" class="fab fa-apple"&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;O LogiSim é uma ferramenta educacional para projetar e simular circuitos digitais. O método de captura é gráfico, ou seja, você desenha o circuito como se estivesse desenhando no papel, na forma de um diagrama, usando portas lógicas. Apesar de suportar HDLs, este não é o foco do projeto. Nota: o projeto original foi descontinuado pelo autor, esta versão é a versão "evolution", um &lt;em&gt;branch&lt;/em&gt; do software original mantido como software aberto por um grupo de universidades suíças.&lt;/p&gt;
&lt;h3&gt;Digital&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/hneemann/Digital/releases/"&gt;&lt;i style="font-size: 1em;" class="fas fa-download"&gt;&lt;/i&gt; Download&lt;/a&gt; |
&lt;a href="https://github.com/hneemann/Digital"&gt;&lt;i style="font-size: 1em;" class="fas fa-file-alt"&gt;&lt;/i&gt; Página&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SOs:&lt;/strong&gt; &lt;i style="font-size: 1em;" class="fab fa-windows"&gt;&lt;/i&gt; &lt;i style="font-size: 1em;" class="fab fa-linux"&gt;&lt;/i&gt; &lt;i style="font-size: 1em;" class="fab fa-apple"&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;O Digital é um &lt;em&gt;revamp&lt;/em&gt; do projeto do LogiSim original. Assim como o LogiSim Evolution (acima), é escrito em Java e roda em praticamente todas as plataformas. É mantido por um desenvolvedor como software aberto e está em desenvolvimento constante. Assim como o predecessor, a captura é gráfica e na forma de diagrama, mas a integração com VHDL (através do GHDL) e Verilog (através do Icarus) é muito boa. Você pode escrever seu componente em VHDL e juntar ao seu diagrama esquemático facilmente. Recomendo para todos que estão começando em Sistemas Digitais.&lt;/p&gt;
&lt;h1&gt;Utilização nas disciplinas&lt;/h1&gt;
&lt;p&gt;Nas disciplinas teóricas de Sistemas Digitais o GHDL é utilizado para correção dos exercícios, mas não faz muita diferença qual simulador você usa para desenvolver, desde que &lt;strong&gt;não utilize&lt;/strong&gt; nenhuma tecnologia dependente de um determinado fabricante. Nestas disciplinas você raramente será solicitado a sintetizar seu circuito.&lt;/p&gt;
&lt;p&gt;Nas disciplinas práticas, você invariavelmente irá sintetizar e experimentar seu circuito em uma placa de prototipação. No &lt;strong&gt;Laboratório Digital&lt;/strong&gt;, as placas são do programa universitário da Intel, fabricadas pela Terasic com FPGAs da Intel. Isso significa que você terá que utilizar o Quartus. É possível utilizar o Active-HDL com o Quartus como &lt;em&gt;backend&lt;/em&gt;, mas esta configuração ainda não é suportada no laboratório. As disciplinas de &lt;strong&gt;Arquitetura de Computadores&lt;/strong&gt;, apesar de teóricas, possuem forte componente prática e você também precisará de um software que suporte síntese. Contudo, nestas disciplinas a placa utilizada é do programa universitário da Xilinx, fabricadas pela Digilent com FPGAs da Xilinx. O software de síntese deste fabricante é o Vivado, porém a disciplina utiliza o arranjo Active-HDL com o Vivado como &lt;em&gt;backend&lt;/em&gt;. Note que o software de síntese só funciona para os dispositivos daquele fabricante, portanto não há como utilizar um software de um fabricante com uma placa de outro (e.g. sintetizar no Vivado e programar a placa da Intel).&lt;/p&gt;
&lt;p&gt;Sempre que for configurar seu ambiente, opte pela versão mais atualizada ou consulte seu professor(a) sobre qual versão será utilizada na disciplina. Se sua versão for diferente da utilizada no laboratório, você pode ter problemas para levar seu projeto para o laboratório e usar os computadores disponíveis para programar a placa. Em nenhum laboratório há restrições quanto a levar seu próprio computador (i.e. notebook), mas consulte sempre o técnico do laboratório ou seu professor(a) para ter certeza que não há nenhum problema em ligar a placa no seu próprio equipamento.&lt;/p&gt;
&lt;p&gt;A escolha de qual software utilizar é pessoal e você deve tomá-la sozinho, porém aconselho que sempre descreva seu hardware sem utilizar nenhuma construção que dependa de um fabricante específico, assim você pode facilmente transportar seu código de um software para o outro.&lt;/p&gt;</content><category term="hdl"></category><category term="vhdl"></category><category term="verilog"></category><category term="simuladores"></category></entry></feed>